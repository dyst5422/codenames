enum Stage {
	RED_HINT
	BLUE_HINT
	RED_REVEAL
	BLUE_REVEAL
	RED_WON
	BLUE_WON
}

enum Faction {
	RED
	BLUE
	ASSASSIN
	BYSTANDER
}

type User {
	id: String!
	name: String!
}

type Team {
	id: String!
	operatives: [User!]!
	operativeIds: [String!]!
	spymaster: User
	spymasterId: String
	addOperative(operativeId: String): Team
	promoteToSpymaster(spymasterId: String): Team
}

type Card {
	word: String!
	faction: Faction
	revealed: Boolean!
}

type Hint {
	word: String
	numCards: Int
}

type Game {
	id: String!
	redTeam: Team
	redTeamId: String!
	blueTeam: Team
	blueTeamId: String!
	stage: Stage
	cards: [Card!]!
	lastHint: Hint
	## These are methods that mutate, so they return the game object which can then be resolved to the new state
	reveal(word: String!): Game
	hint(word: String!, numCards: Int!): Game
}

type Queries {
	user(userId: String, name: String): User
	allUsers: [User!]!
	team(teamId: String!): Team
	allTeams: [Team!]!
	game(gameId: String!): Game
	allGames: [Game!]!
}

type Mutations {
	createUser(name: String!): User
	createTeam: Team
	createGame(redId: String!, blueId: String!): Game
}

type Subscriptions {
	gameCards(gameId: String!): Card!
	gameHints(gameId: String!): Hint!
}

schema {
	query: Queries
	mutation: Mutations
	subscription: Subscriptions
}
